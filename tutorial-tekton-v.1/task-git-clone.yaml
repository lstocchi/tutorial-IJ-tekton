apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.2"
    hub.tekton.dev/catalog: tekton
  name: git-clone
spec:
  description: |-
    These Tasks are Git tasks to work with repositories used by other tasks in your Pipeline.
    The git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory param.
  params:
  - description: git url to clone
    name: url
    type: string
  - default: ""
    description: git revision to checkout (branch, tag, sha, refâ€¦)
    name: revision
    type: string
  - default: ""
    description: (optional) git refspec to fetch before checking out revision
    name: refspec
  - default: "true"
    description: defines if the resource should initialize and fetch the submodules
    name: submodules
    type: string
  - default: "1"
    description: performs a shallow clone where only the most recent commit(s) will
      be fetched
    name: depth
    type: string
  - default: "true"
    description: defines if http.sslVerify should be set to true or false in the global
      git config
    name: sslVerify
    type: string
  - default: ""
    description: subdirectory inside the "output" workspace to clone the git repo
      into
    name: subdirectory
    type: string
  - default: "true"
    description: clean out the contents of the repo's destination directory (if it
      already exists) before trying to clone the repo there
    name: deleteExisting
    type: string
  - default: ""
    description: git HTTP proxy server for non-SSL requests
    name: httpProxy
    type: string
  - default: ""
    description: git HTTPS proxy server for SSL requests
    name: httpsProxy
    type: string
  - default: ""
    description: git no proxy - opt out of proxying HTTP/HTTPS requests
    name: noProxy
    type: string
  - default: "true"
    description: log the commands used during execution
    name: verbose
    type: string
  - default: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.18.1
    description: the image used where the git-init binary is
    name: gitInitImage
    type: string
  results:
  - description: The precise commit SHA that was fetched by this Task
    name: commit
  - description: The precise URL that was fetched by this Task
    name: url
  steps:
  - env:
    - name: PARAM_URL
      value: $(params.url)
    - name: PARAM_REVISION
      value: $(params.revision)
    - name: PARAM_REFSPEC
      value: $(params.refspec)
    - name: PARAM_SUBMODULES
      value: $(params.submodules)
    - name: PARAM_DEPTH
      value: $(params.depth)
    - name: PARAM_SSL_VERIFY
      value: $(params.sslVerify)
    - name: PARAM_SUBDIRECTORY
      value: $(params.subdirectory)
    - name: PARAM_DELETE_EXISTING
      value: $(params.deleteExisting)
    - name: PARAM_HTTP_PROXY
      value: $(params.httpProxy)
    - name: PARAM_HTTPS_PROXY
      value: $(params.httpsProxy)
    - name: PARAM_NO_PROXY
      value: $(params.noProxy)
    - name: PARAM_VERBOSE
      value: $(params.verbose)
    - name: WORKSPACE_OUTPUT_PATH
      value: $(workspaces.output.path)
    image: $(params.gitInitImage)
    name: clone
    script: |
      #!/bin/sh
      set -eu -o pipefail

      if [[ "${PARAM_VERBOSE}" == "true" ]] ; then
        set -x
      fi

      CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

      cleandir() {
        # Delete any existing contents of the repo directory if it exists.
        #
        # We don't just "rm -rf $CHECKOUT_DIR" because $CHECKOUT_DIR might be "/"
        # or the root of a mounted volume.
        if [[ -d "$CHECKOUT_DIR" ]] ; then
          # Delete non-hidden files and directories
          rm -rf "$CHECKOUT_DIR"/*
          # Delete files and directories starting with . but excluding ..
          rm -rf "$CHECKOUT_DIR"/.[!.]*
          # Delete files and directories starting with .. plus any other character
          rm -rf "$CHECKOUT_DIR"/..?*
        fi
      }

      if [[ "${PARAM_DELETE_EXISTING}" == "true" ]] ; then
        cleandir
      fi

      test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
      test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
      test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

      /ko-app/git-init \
        -url "${PARAM_URL}" \
        -revision "${PARAM_REVISION}" \
        -refspec "${PARAM_REFSPEC}" \
        -path "$CHECKOUT_DIR" \
        -sslVerify="${PARAM_SSL_VERIFY}" \
        -submodules="${PARAM_SUBMODULES}" \
        -depth "${PARAM_DEPTH}"
      cd "$CHECKOUT_DIR"
      RESULT_SHA="$(git rev-parse HEAD)"
      EXIT_CODE="$?"
      if [ "$EXIT_CODE" != 0 ] ; then
        exit $EXIT_CODE
      fi
      # ensure we don't add a trailing newline to the result
      echo -n "$RESULT_SHA" > $(results.commit.path)
      echo -n "${PARAM_URL}" > $(results.url.path)
  workspaces:
  - description: The git repo will be cloned onto the volume backing this workspace
    name: output
